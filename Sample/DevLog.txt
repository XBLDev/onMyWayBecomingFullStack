05/05/2017:

It looks like the only way i can get the transparent background color from a array is: 'rgba(0,0,0,0)', not '#transparent' which works when put directly in the style in the view. That's just strange.

For Animated.View, it can only use this.state.value to do animation, this.value doesn't work, even if the this.value is also an Animated.value()

Defining width/borderRadius on an Animated.View element doesn't work. 

03/05/2017:

Experimenting on the react-native navigation function, which is the official way of navigating between different pages, especially useful when transitioning between menu and the story.

The react-native navigation function doesn't seem to compile on web simulator, but compiles on mobile phone.

The navigation is being experimented in "experiment.js", and future experiments will likely go to it too.

It seems that under certain circumstances alignItems:'left' doesn't work, don't know why though.

Can use Dimensions.get('window').width or height to dynamiclly scale UI elements.

borderRadius can give an UI element rounded corner.

Hopefully what i can finish this week: 

1. some interesting animation that gives the hardbound-ish feel
4. make the quiz pages, and the sort of animation that happens between a normal page and the quiz page 
2. make the app more complete: menu, home page button etc.
3. if possible find some way that the user can interact with some animation elements

01/05/2017:

Can store image urls as a state, and get the corresponding image based on pageNum when pageNum is updated. 

It's better to make some other page transition animations other than just translation/alpha change.

Maybe will use listview to make the start menu that contains multiple stories.

28/04/2017:

Update: easy page transition animations from page1 to page2 achieved: combination of translation and alpha change over time.

The top image changing from pen to apple sometimes doesn't appear on the web simulation, but ok on mobile phone (I think).

The time interval between different animations can be shorter to make it more hardbound-ish. Higher speed(duration) of animation may help as well.

It turns out that the way i tried to do it was right: first do the animations that get rid of all the first page content by moving them away or fading them out, and 
at the end of the animation, trigger the callback which updates the pageNum state, and start the second page animation in componentDidUpdate() which starts only when 
states are updated. The reason why i couldn't see it yesterday was because of the web simulation wouldn't display the app image most of the time, which could because of 
my way of implementation, or just a bug.

The way it is now, there are certain limitations: 

1. i can't start the 2nd page animations until all the 1st page animations are finished, but that may not be a problem, since i can just use one 1st page animation to trigger the callback, and do fade out of rest of 1st page and fade in of 2nd page afterwards, could use different sequences of animations to make the fade in/out more dynamic/interesting.

2. Once the page number increases to a certain level, it will become difficult to keep track of lists of animations used for different page transitions. Perhaps need a 
better way to store the animations, possibly as an array list or something like that.

Goal for next week/over weenkend: 

1. finish the primer example with less pages, since most of the pages have similar structures, just one of those similar pages should be enough.

The difficult part is presumably the transition from "normal" page to those quiz pages where you answer questions.

Some of the page animations could be hard to do as well. Explore different types of animations with different page transitions.

2. If i have anytime left, build a complete app with start menu, and "back to menu" option at the final page of the example.

27/04/2017:

General suggestion from website: DO NOT USE ANIMATED() FOR ANIMATION, and that's exactly what i've been doing all this time.

WHAT I'VE BEEN TRYING TO DO: with the head icon/pic/image, when clicked, first fade out, change the image from the pen to the apple, and fade in.

More specifically, i want the end of the animation to serve as the indicator that the fade out is finished, and from there change the image and fade in.

I think it should be easy to handle other animations once this one is done. Seemingly small task, but already spent 3 days on it.

Seems that i can't have everything: either the image changes without animation, or animation without image change, and sometimes when the image changes, 
it's just a flash and the image disappears. The callback either not working, or the image changes but no animation.

Some other animation options: 

1. lottie the react native plugin, tried running it, but it seems that it requires a couple more plugins to install, and i don't think it can actually do what i need, 
besides, it won't be possible to show the result on the web simulator if i use that plugin, which is the problem for any other animation APIs that requires importing some 
other dependencies.

2. LayoutAnimation and react-native-animatable: suggestion from this website: https://blog.bam.tech/developper-news/5-tips-to-make-a-great-component-to-page-animation-in-react-native, both require more dependencies, and not really well documented either. The LayoutAnimation looks more usable though, it has official documentation.

Some quotes from a stackoverflow question:

"I have several active animations in a component. When I am trying to update a component state during these animations they stop due to the rerendering process. Is there any way to prevent this from happening?"

So it looks like updating a state can stop animations. 

26/04/2017:

I thought i can use state update to indicate whether the fadeout animation of previous page is finished so i can go onto the next page, but somehow the state 
update is in certain cases not detected, and even when detected, it's not happening on the second page: i have to go back to the first page to see that pen change 
to a green apple. Maybe there's something fundamentally wrong with the way I do it.

24/04/2017:

First page animation is easy, still need to find a way to transition from 1st to 2nd page.

21/04/2017:

Comment on React Native:

1. Facebook provides a set of tools for building android app, the complie speed is better than using Android Studio.
2. React Native can show change on screen without re-compile, similar to the fast-compile function of Android Studio. But for now there's bug related
to the port number(8088/8081) that make fast compile not usable. Should find a way to enable this function to speed up production.
3. React Native can be developed without Android Studio, and the web simulation can give error logs for debugging.
